Instalamos la librería de manera global

npm install -g create-react-app


Creamos nuestro proyecto:

create-react-app places


## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.<br>
Open [http://localhost:3000](http://localhost:3000) to view it in the browser.

The page will reload if you make edits.<br>
You will also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.<br>
See the section about [running tests](#running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.<br>
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.<br>
Your app is ready to be deployed!

See the section about [deployment](#deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can’t go back!**

If you aren’t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (Webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.

You don’t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.



Conectamos proyecto con GitHub

echo "# Basic-React" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/JFCasas/Basic-React.git
git push -u origin master



JSX

Si examinamos el fichero App.js vemos el primer ejemplo de JSX


<h1 className="App-title">Welcome to React</h1>

Utilizamos className para especificar clases en vez de la palabra reservada de Javascript "class"


 Podemos colocar expresiones Javascript mediante la utilización de {}

 Un ejemplo puede ser el siguiente:

 <header className="App-header">
  <img src={logo} className="App-logo" alt="logo" />
  <h1 className="App-title">Welcome to React</h1>
  {20*10}
</header>


Se pueden definir funciones y ejecutarlas dentro de JSX

class App extends Component {

  hello(){

    return "Hola Mundo"
  }
  
  render() {
    return (
      <div className="App">
        <header className="App-header">
          <img src={logo} className="App-logo" alt="logo" />
          <h1 className="App-title">Welcome to React</h1>
          
          {this.hello()}
        </header>

        <p className="App-intro">
          To get started, edit <code>src/App.js</code> and save to reload.
        </p>
      </div>
    );
  }
}

Se van a poder establecer ciclos, condiciones........




PRIMER COMPONENTE

Dentro de src creamos la carpeta components

Creamos un archivo con nombre Title.js


import React from 'react'

export default class Title extends React.Component {

	render(){

		return (

			<div>
				<h1>Places</h1>
				<p>Descubre lugares de manera simple</p>
			</div>
		)
	}
}

Una vez creado nuestro componente hacemos uso del mismo:

App.js

import React, { Component } from 'react';
import logo from './logo.svg';
import './App.css';

import Title from './components/Title'

class App extends Component {

  
  
  render() {
    return (
      <div className="App">
        <header className="App-header">
          <img src={logo} className="App-logo" alt="logo" />
          
          <Title></Title> 
          
        </header>

        <p className="App-intro">
          To get started, edit <code>src/App.js</code> and save to reload.
        </p>
      </div>


    );
  }
}

export default App;





IMPORTAR Y EXPORTAR MÓDULOS ES6

"import" nos permite traer módulos externos para utilizarlos en nuestro desarrollo

Observamos 2 maneras de importar

import React from 'react'

import React, { Component } from 'react';


Depende de la manera de como hemos exportado. Existe como hemos visto anteriormente la posibilidad de exportar un módulo por defecto.

Supongamos que en Title.js tenemos lo siguiente;


export function hola(){
	
	return "hola"
}

En App.js

import {hola} from './components/Title'

class App extends Component {

  
  
  render() {
    return (
      <div className="App">
        <header className="App-header">
          <img src={logo} className="App-logo" alt="logo" />

          {hola()}
          
          <Title></Title> 
          
        </header>

        <p className="App-intro">
          To get started, edit <code>src/App.js</code> and save to reload.
        </p>
      </div>


    );
  }
}

export default App;


Sólo puede haber un único elemento que se exporta por defecto con el key "default"



DATOS VIA PROPS

Props son las propiedades  de un componente que enviamos cuando el componente se genera.

Podríamos hacer algo de la siguiente manera:

Title.js

import React from 'react'

export default class Title extends React.Component {

	render(){

		return (

			<div>

				<h1>{this.props.title}</h1>
				<p>Descubre lugares de manera simple</p>
			
			</div>
		)
	}

}

App.js

class App extends Component {

  
  
  render() {
    return (
      <div className="App">
        <header className="App-header">
          <img src={logo} className="App-logo" alt="logo" />

          <Title title="PEPEHILLO"></Title> 
          
        </header>

        <p className="App-intro">
          To get started, edit <code>src/App.js</code> and save to reload.
        </p>
      </div>


    );
  }
}

export default App;


Principal característica de los props de un componente es que son inmutables. 

Ese valor no se puede modificar. 

Para valores y datos dinámicos se utilizaran "state" de los que hablaremos posteriormente.



